<?php
// $Id$

/**
 * @file
 * Functions for the wdi module.
 */

/**
 * Implements hook_help().
 */
function wdi_help($path, $arg) {
  $message = NULL;

  switch ($path) {
    case 'admin/config/search/wdi':
      $message = '<p>' . t('Help for general settings') . '</p>';
      break;

    case 'admin/config/search/wdi/tasks':
      $message = '<p>' . t('Only <strong>the 5 first tasks</strong> will be displayed.') . '</p>';
      break;

    case 'admin/config/search/wdi/tasks/add':
      $message = '<p>' . t('Help for add tasks') . '</p>';
      break;

    case 'admin/config/search/wdi/jumplists':
      $message = '<p>' . t('Help for all jumplists available') . '</p>';
      break;

    case 'admin/config/search/wdi/jumplists/add':
      $message = '<p>' . t('Help for add jumplist item') . '</p>';
      break;

    case 'admin/help#wdi':
      $uri     = 'http://msdn.microsoft.com/en-us/library/gg131029(v=VS.85).aspx';
      $website = l($uri, $uri, array('attributes' => array('target' => '_blank')));
      $message = '<p>' . t('Get more help for Pinned Sites configuration at :') . '<br>' . $website . '</p>';
      break;
  }
  return $message;
}

/**
 * Implements hook_permission().
 */
function wdi_permission() {
  $permissions = array();
  $permissions['administer wdi'] = array(
    'title' => t('Administer Windows Desktop Integration'),
    'description' => t('Perform administration tasks for WDI.'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function wdi_menu() {
  $items = array();

  $items['admin/config/search/wdi'] = array(
    'title' => 'Windows Desktop Integration',
    'description' => 'Manage the way Windows 7 integrates Internet Explorer 9.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wdi_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wdi.admin.inc',
  );

  $items['admin/config/search/wdi/settings'] = array(
    'title' => 'General settings',
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/search/wdi/tasks'] = array(
    'title' => 'Tasks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wdi_tasks_overview'),
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wdi.admin.inc',
    'weight' => 0,
  );

  $items['admin/config/search/wdi/tasks/list'] = array(
    'title' => 'All tasks',
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'wdi.admin.inc',
    'weight' => -1,
  );

  $items['admin/config/search/wdi/tasks/add'] = array(
    'title' => 'Add task',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wdi_admin_settings_tasks_add'),
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wdi.admin.inc',
    'weight' => 1,
  );


  $items['admin/config/search/wdi/jumplists'] = array(
    'title' => 'Jumplists',
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wdi.admin.inc',
    'weight' => 1,
  );


  $items['admin/config/search/wdi/jumplists/list'] = array(
    'title' => 'All jumplists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wdi_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'wdi.admin.inc',
    'weight' => -1,
  );

  $items['admin/config/search/wdi/jumplists/add'] = array(
    'title' => 'Add jumplist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wdi_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer wdi'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wdi.admin.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Validation for wdi_admin_settings form
 */
function wdi_admin_settings_validate($form, &$form_state) {
  // Trim all values
  $form_state['values'] = array_map('trim', $form_state['values']);

  // Application start URL
  if (valid_url($form_state['values']['wdi_msapplication_starturl'], FALSE) == FALSE) {
    form_set_error('wdi_msapplication_starturl', t('This is not a valid URL.'));
  }

  // Navigation button color
  $color = $form_state['values']['wdi_msapplication_navbutton_color'];
  if (preg_match('/^#?([\da-f]{3}){1,2}$/i', $color)) {
    $form_state['values']['wdi_msapplication_navbutton_color'] = '#' . ltrim(drupal_strtolower($color), '#');
  }
  else {
    $form_state['values']['wdi_msapplication_navbutton_color'] = _wdi_named_color($color) ? $color : NULL;
  }

  // Window width
  $width = ltrim($form_state['values']['wdi_msapplication_window_width'], 0);
  $form_state['values']['wdi_msapplication_window_width'] = (preg_match('/^\d{3,4}$/', $width) == 0 || (int)$width < 800) ? 800 : $width;

  // Window height
  $height = ltrim($form_state['values']['wdi_msapplication_window_height'], 0);
  $form_state['values']['wdi_msapplication_window_height'] = (preg_match('/^\d{3,4}$/', $height) == 0 || (int)$height < 600) ? 600 : $height;
}

/**
 * Submit Reset button from wdi_admin_settings form.
 */
function wdi_admin_settings_reset_submit($form, &$form_state) {
  $variables = array(
    'wdi_application_name',
    'wdi_msapplication_tooltip',
    'wdi_msapplication_starturl',
    'wdi_msapplication_navbutton_color',
    'wdi_msapplication_window_width',
    'wdi_msapplication_window_height',
  );
  array_map('variable_del', $variables);
  drupal_set_message(t('The configuration options have been reset to their default values.'));
}

/**
 * Implements hook_init().
 */
function wdi_init() {
  // if (_wdi_ie9() == true) {
  _wdi_set_general_metas();
  _wdi_set_tasks();
  //}
}

/**
 * Returns TRUE if the browser is IE9
 */
function _wdi_ie9() {
  return $_SERVER['HTTP_USER_AGENT'] == 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)';
}

/**
 * Returns TRUE if this is a named color
 */
function _wdi_named_color($color) {
  $named_colors = array(
    'AliceBlue',
    'AntiqueWhite',
    'Aqua',
    'Aquamarine',
    'Azure',
    'Beige',
    'Bisque',
    'Black',
    'BlanchedAlmond',
    'Blue',
    'BlueViolet',
    'Brown',
    'BurlyWood',
    'CadetBlue',
    'Chartreuse',
    'Chocolate',
    'Coral',
    'CornflowerBlue',
    'Cornsilk',
    'Crimson',
    'Cyan',
    'DarkBlue',
    'DarkCyan',
    'DarkGoldenrod',
    'DarkGray',
    'DarkGrey',
    'DarkGreen',
    'DarkKhaki',
    'DarkMagenta',
    'DarkOliveGreen',
    'DarkOrange',
    'DarkOrchid',
    'DarkRed',
    'DarkSalmon',
    'DarkSeaGreen',
    'DarkSlateBlue',
    'DarkSlateGray',
    'DarkSlateGrey',
    'DarkTurquoise',
    'DarkViolet',
    'DeepPink',
    'DeepSkyBlue',
    'DimGray',
    'DimGrey',
    'DodgerBlue',
    'FireBrick',
    'FloralWhite',
    'ForestGreen',
    'Fuchsia',
    'Gainsboro',
    'GhostWhite',
    'Gold',
    'Goldenrod',
    'Gray',
    'Grey',
    'Green',
    'GreenYellow',
    'Honeydew',
    'HotPink',
    'IndianRed',
    'Indigo',
    'Ivory',
    'Khaki',
    'Lavender',
    'LavenderBlush',
    'LawnGreen',
    'LemonChiffon',
    'LightBlue',
    'LightCoral',
    'LightCyan',
    'LightGoldenrodYellow',
    'LightGreen',
    'LightGray',
    'LightGrey',
    'LightPink',
    'LightSalmon',
    'LightSeaGreen',
    'LightSkyBlue',
    'LightSlateGray',
    'LightSlateGrey',
    'LightSteelBlue',
    'LightYellow',
    'Lime',
    'LimeGreen',
    'Linen',
    'Magenta',
    'Maroon',
    'MediumAquamarine',
    'MediumBlue',
    'MediumOrchid',
    'MediumPurple',
    'MediumSeaGreen',
    'MediumSlateBlue',
    'MediumSpringGreen',
    'MediumTurquoise',
    'MediumVioletRed',
    'MidnightBlue',
    'MintCream',
    'MistyRose',
    'Moccasin',
    'NavajoWhite',
    'Navy',
    'OldLace',
    'Olive',
    'OliveDrab',
    'Orange',
    'OrangeRed',
    'Orchid',
    'PaleGoldenrod',
    'PaleGreen',
    'PaleTurquoise',
    'PaleVioletRed',
    'PapayaWhip',
    'PeachPuff',
    'Peru',
    'Pink',
    'Plum',
    'PowderBlue',
    'Purple',
    'Red',
    'RosyBrown',
    'RoyalBlue',
    'SaddleBrown',
    'Salmon',
    'SandyBrown',
    'SeaGreen',
    'Seashell',
    'Sienna',
    'Silver',
    'SkyBlue',
    'SlateBlue',
    'SlateGray',
    'SlateGrey',
    'Snow',
    'SpringGreen',
    'SteelBlue',
    'Tan',
    'Teal',
    'Thistle',
    'Tomato',
    'Turquoise',
    'Violet',
    'Wheat',
    'White',
    'WhiteSmoke',
    'Yellow',
    'YellowGreen',
  );
  return in_array(strtolower($color), array_map('strtolower', $named_colors));
}

/**
 * Set general metas
 */
function _wdi_set_general_metas() {
  // Define all metas
  $metas = array();

  if ($application_name = variable_get('wdi_application_name', variable_get('site_name'))) {
    $metas['application-name'] = $application_name;
  }

  if ($tooltip = variable_get('wdi_msapplication_tooltip', variable_get('site_slogan'))) {
    $metas['msapplication-tooltip'] = $tooltip;
  }

  if ($color = variable_get('wdi_msapplication_navbutton_color')) {
    $metas['msapplication-navbutton-color'] = $color;
  }

  $metas['msapplication-window'] = 'width=' . variable_get('wdi_msapplication_window_width', 800) . ';height=' . variable_get('wdi_msapplication_window_height', 600);

  if (variable_get('site_frontpage') == variable_get('wdi_msapplication_starturl')) {
    $metas['msapplication-starturl'] = url('<front>', array('absolute' => TRUE));
  }
  else {
    $metas['msapplication-starturl'] = url(variable_get('wdi_msapplication_starturl'), array('absolute' => TRUE));
  }

  // Write all metas
  foreach ($metas as $key => $value) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => $key,
        'content' => $value,
      ),
    );
    drupal_add_html_head($element, $key);
  }
}

function _wdi_set_tasks() {
  $tasks = wdi_tasks(FALSE);

  foreach ($tasks as $task) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'msapplication-task',
        'content' => 'name=' . $task->name. ';action-uri=' . $task->action_uri . ';icon-uri=' . $task->icon_uri,
      ),
      '#weight' => 100 + $task->weight ,
    );
    dpm($element);
    drupal_add_html_head($element, 'wdi_task_' . $task->name);
  }
}

/**
 * Return all tasks
 */
function wdi_tasks($admin = TRUE) {
  // Query wdi_tasks table
  $result = db_select('wdi_tasks', 'wt')->fields('wt', array('tid', 'name', 'action_uri', 'icon_uri', 'weight'))->orderBy('weight', 'ASC')->execute();

  // Set resutl array
  $records = array();

  // For each record we have found
  foreach ($result as $record) {
    $record->icon_uri = $record->icon_uri == -1 ? _wdi_default_favicon() : $record->icon_uri;
    $records[$record->tid] = $record;
  }
  
  if($admin == false){
  	$records = array_slice($records, 0, 5);
  }
  
  // Return result
  return $records;
}

/**
 * Implements hook_theme().
 */
function wdi_theme($existing, $type, $theme, $path) {
  $themes = array();
  $themes['wdi_tasks_overview'] = array(
    'render element' => 'form',
  );
  return $themes;
}

/**
 * theme function for wdi_tasks_owerview form
 */
function theme_wdi_tasks_overview($variables) {
  // Get form
  $form = $variables['form'];

  // Set header
  $header = array(
    t('Icon'),
    t('Name'),
    t('URI'),
    t('Weight'),
    array(
      'data' => t('Operations'),
      'colspan' => 2,
    ),
  );

  // Define rows
  $rows = array();

  // For each task
  $tasks = element_children($form['tasks']);
  foreach ($tasks as $tid) {
    $rows[] = array(
      'data' => array(
        drupal_render($form['tasks'][$tid]['icon_uri']),
        drupal_render($form['tasks'][$tid]['name']),
        drupal_render($form['tasks'][$tid]['action_uri']),
        drupal_render($form['tasks'][$tid]['weight']),
        drupal_render($form['tasks'][$tid]['edit']),
        drupal_render($form['tasks'][$tid]['delete']),
      ),
      'class' => array('draggable'),
    );
  }

  // Set table variable
  $table_variable = array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No task defined. <a href="@url">Add a task</a> now.', array('@url' => url('admin/config/search/wdi/tasks/add'))),
    'attributes' => array(
      'id' => 'wdi-tasks-order',
    ),
  );

  // Render table
  $table = theme('table', $table_variable);
  drupal_add_tabledrag('wdi-tasks-order', 'order', 'sibling', 'wdi-tasks-order-weight');

  // Render the rest of the form
  return $table . drupal_render_children($form);
}

/**
 * Submit function for wdi_tasks_overview form
 */
function wdi_tasks_overview_submit($form, &$form_state) {
  foreach ($form_state['values']['tasks'] as $tid => $task) {
    if (is_array($task) && isset($task['weight'])) {
      db_update('wdi_tasks')->fields(array('weight' => $task['weight']))->condition('tid', $tid)->execute();
    }
  }
  // Clear the cache
  cache_clear_all('wdi_tasks', 'cache');

  // Display a message
  drupal_set_message(t('The tasks ordering has been saved.'));
}

/**
 * Get favicon
 */
function _wdi_default_favicon() {
  global $conf;
  return empty($conf['theme_settings']['favicon_path']) ? 'misc/favicon.ico' : $conf['theme_settings']['favicon_path'];
}
